FORMAT: 1A
HOST: https://hello-books-postgresql.herokuapp.com/

# hello-books-postgresql

This is where users are going to rent a book. For this app, the admin can perform CRUD function while normal users can borrow or return a book. If book is borrowed, another user can't access it it until it's been returned. 

## User Registration [/api/v2/auth/register]


### Register a user [POST]


Register a user by sending a json object with username, email, password and optional is_admin true if user
is admin iproperties.
The password must be 8 characters or more, must have one capital letter, a number
and a character.
The email must be in the format (something@something.something)

+ Request (application/json)

        {
            "username": "admin1",
            "email": "admin1@mail.com",
            "password": "ADMINlogin#password123",
            "is_admin": true
        }


+ Response 201 (application/json)

        {
            "auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MDM0ODQ5OTYsImlhdCI6MTUwMzM5ODU4Niwic3ViIjo1fQ.GC6IEOohdo_xrz9__UeugIlir0qtJdKbEzBtLgqjt5A",
            "message": "successfully registered",
            "status": "success"
        }

+ Response 400 (application/json)

        {
            "message": "user already exists, please sign in",
            "status": "error"
        }

+ Response 400 (application/json)

        {
            "error": "bad request"
        }

+ Response 400 (application/json)

        {
            "message": {
                "email": [
                    "required field"
                ],
                "password": [
                    "required field"
                ],
                "username": [
                    "required field"
                ]
            },
            "status": "error"
        }

+ Response 400 (application/json)

        {
            "message": "content-type must be json",
            "status": "error"
        }

+ Response 500 (application/json)

        {
            "error": "internal server error"
        }

## Login [/api/v2/auth/login]

### Login user [POST]
Login user by sending username, email and password.
If any of these fields misses or an uknown field is added it will return an error.

If everything is right it will return a token as __auth_token__ that you will need for any authentication usage.

+ Request (application/json)

         {
            "username": "admin1",
            "email": "admin1@mail.com",
            "password": "ADMINlogin#password123"
        }

+ Response 200 (application/json)

        {
            "auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MDM0ODQ5OTYsImlhdCI6MTUwMzM5ODU4Niwic3ViIjo1fQ.GC6IEOohdo_xrz9__UeugIlir0qtJdKbEzBtLgqjt5A",
            "message": "successfully logged in",
            "status": "success"
        }

+ Response 401 (application/json)

        {
            "message": "user doesn't exist or password is incorrect or username and email do not match",
            "status": "error"
        }

+ Response 401 (application/json)

        {
            "message": {
                "email": [
                    "required field"
                ],
                "password": [
                    "required field"
                ],
                "username": [
                    "required field"
                ]
            },
            "status": "error"
        }

+ Response 401 (application/json)

        {
            "message": {
                "key": [
                    "unknown field"
                ]
            },
            "status": "error"
        }

+ Response 400 (application/json)

        {
            "error": "bad request"
        }

+ Response 400 (application/json)

        {
            "message": "content-type must be json",
            "status": "error"
        }

        
## Logout [/api/v2/auth/logout]

### Log Out User [POST]

Log out user by sending a request with their **auth_token** which will then be blaclisted.

+ Request (application/json)

    + Headers

            Authorization: Bearer JWT Token
            
+ Response 200 (application/json)

        {
            "message": "successfully logged out",
            "status": "success"
        }
    
        
+ Response 403 (application/json)

        {
            "message": "provide a valid token",
            "status": "error"
        }       

+ Response 403 (application/json)

        {
          "message": "provide an authorization header",
          "status": "error"
        }


## Book Resources [/api/v2/books{?limit}{?page_num}]

You can create, read, update or delete a book.

__IMPORTANT!:__ A valid token should be present in the header. If you're going to create, update or delete a book make sure the user is admin. If **limit** is provided, **page_num** must also be provided otherwise you'll het an error.

+ Parameters
    + limit(optional, string, `limit=2`) - Limit the result number sent back
    + page_num(optional, string, `page=1`) - Page number

### Create Book [POST]

Admin can add a new book.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT Token

    + Body

            {
                "title": "hello book",
                "isbn": "1234567890"
            }

+ Response 200 (application/json)

        {
            "message": {
                "book_created": {
                    "date_created": "day, date, year, time",
                    "date_modified": "day, date, year, time",
                    "id": 1,
                    "isbn": "1234567890",
                    "title": "hello books"
                }
            },
            "status": "success"
        }

+ Response 400 (application/json)

        {
            "error": "isbn length must be 10",
        }

+ Response 400 (application/json)

        {
            "message": "isbn must only include numbers",
            "status": "error"
        }

+ Response 400 (application/json)

        {
            "error": "bad request"
        }

+ Response 400 (application/json)

        {
            "message": {
                    "isbn": [
                        "required field"
                    ],
                    "title": [
                        "required field"
                    ]
        },
            "status": "error"
        }

+ Response 400 (application/json)

        {
            "error": {
                "limit": [
                    "required field"
                ],
                "page": [
                    "required field"
                ]
            }
        }

+ Response 202 (application/json)

        {
            "message": "Content-type must be json",
            "status": "error"
        }

# Data Structures

## Book (object)

+ title: `Hello Books` (string, required) - Book title
+ isbn: `1234567890` (string, required) - unique ISBN number of the book. Must be 10 digits.



## User (object)

+ username: `Username` (string, required) - Must be unique
+ email: `username@mail.com` (string, required) - Must be unique and have the format **localpart@domain.domain**
+ password: `USERemail@password123` (string, required) - Must be 8 characters or more, have at least one letter in caps, small caps and contain and contain both numerals and characters.